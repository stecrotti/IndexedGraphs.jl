var documenterSearchIndex = {"docs":
[{"location":"graph/#IndexedGraph","page":"IndexedGraph","title":"IndexedGraph","text":"","category":"section"},{"location":"graph/","page":"IndexedGraph","title":"IndexedGraph","text":"IndexedGraph","category":"page"},{"location":"graph/#IndexedGraphs.IndexedGraph","page":"IndexedGraph","title":"IndexedGraphs.IndexedGraph","text":"IndexedGraph{T<:Integer} <: AbstractIndexedGraph{T}\n\nA type representing a sparse undirected graph.\n\nFIELDS\n\nA – square adjacency matrix. A[i,j] == A[j,i] contains the unique index associated to unidrected edge (i,j)\n\n\n\n\n\n","category":"type"},{"location":"graph/","page":"IndexedGraph","title":"IndexedGraph","text":"IndexedGraph(A::AbstractMatrix)","category":"page"},{"location":"graph/#IndexedGraphs.IndexedGraph-Tuple{AbstractMatrix}","page":"IndexedGraph","title":"IndexedGraphs.IndexedGraph","text":"IndexedGraph(A::AbstractMatrix)\n\nConstruct an IndexedGraph from symmetric adjacency matrix A.\n\n\n\n\n\n","category":"method"},{"location":"bidigraph/#IndexedBiDiGraph","page":"IndexedBiDiGraph","title":"IndexedBiDiGraph","text":"","category":"section"},{"location":"bidigraph/","page":"IndexedBiDiGraph","title":"IndexedBiDiGraph","text":"IndexedBiDiGraph","category":"page"},{"location":"bidigraph/#IndexedGraphs.IndexedBiDiGraph","page":"IndexedBiDiGraph","title":"IndexedGraphs.IndexedBiDiGraph","text":"IndexedBiDiGraph{T<:Integer} <: AbstractIndexedDiGraph{T}\n\nA type representing a sparse directed graph with access to both outedges and inedges.\n\nFIELDS\n\nA – square matrix filled with NullNumbers. A[i,j] corresponds to edge j=>i.\nX – square matrix for efficient access by row. X[j,i] points to the index of element A[i,j] in A.nzval. \n\n\n\n\n\n","category":"type"},{"location":"bidigraph/","page":"IndexedBiDiGraph","title":"IndexedBiDiGraph","text":"IndexedBiDiGraph(A::AbstractMatrix)","category":"page"},{"location":"bidigraph/#IndexedGraphs.IndexedBiDiGraph-Tuple{AbstractMatrix}","page":"IndexedBiDiGraph","title":"IndexedGraphs.IndexedBiDiGraph","text":"IndexedBiDiGraph(A::AbstractMatrix)\n\nConstruct an IndexedBiDiGraph from the adjacency matrix A. \n\nIndexedBiDiGraph internally stores the transpose of A. To avoid overhead due to the transposition, use IndexedBiDiGraph(transpose(At)) where At is the  transpose of A.\n\nusing SparseArrays\nAt = sprand(100, 100, 0.1)           # At[i,j] corresponds to edge j=>i\ng = IndexedBiDiGraph(transpose(At))  \ng.A.rowval === At.rowval\n\n\n\n\n\n","category":"method"},{"location":"digraph/#IndexedDiGraph","page":"IndexedDiGraph","title":"IndexedDiGraph","text":"","category":"section"},{"location":"digraph/","page":"IndexedDiGraph","title":"IndexedDiGraph","text":"IndexedDiGraph","category":"page"},{"location":"digraph/#IndexedGraphs.IndexedDiGraph","page":"IndexedDiGraph","title":"IndexedGraphs.IndexedDiGraph","text":"IndexedDiGraph{T<:Integer} <: AbstractIndexedDiGraph{T}\n\nA type representing a sparse directed graph with access only to outedges.\n\nFIELDS\n\nA – square matrix filled with NullNumbers. A[i,j] corresponds to an edge j=>i\n\n\n\n\n\n","category":"type"},{"location":"digraph/","page":"IndexedDiGraph","title":"IndexedDiGraph","text":"IndexedDiGraph(A::AbstractMatrix)","category":"page"},{"location":"digraph/#IndexedGraphs.IndexedDiGraph-Tuple{AbstractMatrix}","page":"IndexedDiGraph","title":"IndexedGraphs.IndexedDiGraph","text":"IndexedDiGraph(A::AbstractMatrix)\n\nConstructs a IndexedDiGraph from the adjacency matrix A.\n\nIndexedDiGraph internally stores the transpose of A. To avoid overhead due to the transposition, use IndexedDiGraph(transpose(At)) where At is the  transpose of A.\n\n\n\n\n\n","category":"method"},{"location":"#IndexedGraphs-documentation","page":"Home","title":"IndexedGraphs documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package defines three types of Graphs:","category":"page"},{"location":"","page":"Home","title":"Home","text":"IndexedGraph\nIndexedDiGraph\nIndexedBidiGraph","category":"page"}]
}
